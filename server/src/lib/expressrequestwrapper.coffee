###
    A safe wrapper around the request to hide access to query, params and body.
    This allows us to sanitize those fields when requested.    
###

utils = require './utils'
validator = require 'validator'

class ExpressRequestWrapper

    constructor: (@raw, @typeUtils) ->
        @headers = @raw.headers

    
    
    getParameter: (src, name, def = "string") =>
        if typeof def is 'string' 
            def = @typeUtils.getFieldDefinition def
        val = @raw[src][name]
        @parsePrimitive val, def, name
        

    
    params: (name, type) =>
        @getParameter 'params', name, type
        

    
    query: (name, type) =>
        @getParameter 'query', name, type



    body: (name, type) =>
        @getParameter 'body', name, type
    

    
    cookies: (name, type) =>
        @getParameter 'cookies', name, type
        
    
    
    files: (name) =>
        if name
            @raw.files[name]
        else
            @raw.files


    
    map: (target, whitelist, options = { overwrite: true }, prefix = []) =>
        typeDef = target.getTypeDefinition()        
        for field, def of typeDef.fields
            if @populateObject(target, field, def, whitelist, options, prefix) is true
                modified = true
        modified
                
        
    
    populateObject: (obj, name, def, whitelist, options, prefix) =>
        if not obj[name] or options.overwrite
            if name isnt '_id' and def.map isnt false and not def.autoGenerated
                fullName = prefix.concat(name).join '_'
                if @typeUtils.isPrimitiveType(def.type)
                    if whitelist.indexOf(fullName) > -1
                        val = @body fullName, 'string'
                        if val
                            obj[name] = @parsePrimitive val, def, fullName
                            true            
                        else
                            if def.map isnt false and def.default
                                obj[name] = if typeof def.map.default is "function" then def.map.default(obj) else def.map.default
                                true
                else
                    if def.type isnt ''
                        prefix.push name
                        
                        newObj = obj[name] ? new def.type()
                        if @map(newObj, whitelist, options, prefix)
                            obj[name] ?= newObj
                            
                        prefix.pop()



    parsePrimitive: (val, def, fieldName) =>
        switch def.type
            when 'number'
                (if def.integer then parseInt else parseFloat) val
            when 'string'
                validator.sanitize(val).xss()
            when 'boolean'
                val is "true"
            when 'array'
                if def.map?.format is 'csv'
                    (@parsePrimitive(vs, def.contents.type, fieldName) for v in val.split(','))                    
                else
                    throw new Error "Cannot parse this array. Unknown format."
            else      
                throw new Error "#{def.type} #{fieldName} is a non-primitive. Cannot parse."
                
exports.ExpressRequestWrapper = ExpressRequestWrapper
