utils = require '../utils'

class TypeUtils
    
    @TypeDefCache = []

    

    isUserDefinedType: (type) ->
        ['string', 'number', 'boolean', 'array', ''].indexOf(type) is -1   



    isPrimitiveType: (type) ->
        ['string', 'number', 'boolean', 'array'].indexOf(type) > -1   



    getTypeDefinition: (ctor, inherited) =>
        match = (f for f in TypeUtils.TypeDefCache when f.ctor is ctor)[0]
        if not match
            typeDefinition = if typeof ctor.typeDefinition is "function" then ctor.typeDefinition() else ctor.typeDefinition                
            for field, def of typeDefinition.fields
                typeDefinition.fields[field] = @getFieldDefinition(def)
            
            if typeDefinition.inherits
                baseCtor = @resolveUserDefinedType typeDefinition.inherits
                fullTypeDefinition = @mergeTypeDefinition typeDefinition, baseCtor.getTypeDefinition()    

            match = { ctor, name: typeDefinition.name, typeDefinition, fullTypeDefinition }
            TypeUtils.TypeDefCache.push match
            
        if inherited and match.typeDefinition.inherits then match.fullTypeDefinition else match.typeDefinition
            
            
            
    mergeTypeDefinition: (child, parent) ->
        if not parent
            return child
        else
            result = {}
            utils.extend result, child, (n) -> n isnt 'fields'
            utils.extend result, parent, (n) -> n isnt 'fields'
            result.fields = {}
            if child.fields
                utils.extend result.fields, child.fields 
            if parent.fields
                utils.extend result.fields, parent.fields 
            result
            
            

    getFieldDefinition: (def) ->
        if typeof(def) is 'string'

            defString = def.split ' '
            fieldDef = { type: defString[0] }

            fieldDef.required = defString.indexOf('!required') is -1

            if fieldDef.type is 'number' 
                if defString.indexOf('integer') isnt -1
                    fieldDef.integer = true
        else 
            fieldDef = {}
            utils.extend fieldDef, def

        if fieldDef.autoGenerated and (fieldDef.event is 'created' or fieldDef.event is 'updated')        
            fieldDef.type = 'number'
            fieldDef.integer = true
            fieldDef.required = true
            
        if fieldDef.type is 'array'
            fieldDef.contents = @getFieldDefinition fieldDef.contents

        fieldDef.required ?= true                
        fieldDef.type ?= ''

        if @isUserDefinedType(fieldDef.type) 
            fieldDef.ctor = @resolveUserDefinedType fieldDef.type
        
        fieldDef 
        

exports.TypeUtils = TypeUtils
