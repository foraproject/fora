utils = require '../utils'

class TypeUtils
    
    isUserDefinedType: (type) ->
        ['string', 'number', 'boolean', 'array', ''].indexOf(type) is -1   


    isPrimitiveType: (type) ->
        ['string', 'number', 'boolean', 'array'].indexOf(type) > -1   


    getFieldDefinition: (def) ->
        if typeof(def) is 'string'
            defString = def.split ' '
            fieldDef = { type: defString[0] }
            fieldDef.required = defString.indexOf('!required') is -1
            if fieldDef.type is 'integer'
                fieldDef.integer = defString.indexOf('integer') isnt -1
        else 
            fieldDef = {}
            utils.extend fieldDef, def

        if typeof(fieldDef.type) is 'string' and @isUserDefinedType(fieldDef.type) 
            fieldDef.type = @resolveType fieldDef.type

        if fieldDef.autoGenerated and (fieldDef.event is 'created' or fieldDef.event is 'updated')        
            fieldDef.type = 'number'
            fieldDef.integer = true
            fieldDef.required = true
            
        if fieldDef.type is 'array'
            fieldDef.contents = @getFieldDefinition fieldDef.contents

        fieldDef.required ?= true                
        fieldDef.type ?= ''
        
        fieldDef 
        

    resolveType: (name) =>
        name
    
exports.TypeUtils = TypeUtils
