odm = require('fora-odm')
conf = require('../conf')
fs = require 'fs'
path = require 'path'
thunkify = require 'thunkify'
readdir = thunkify fs.readdir
stat = thunkify fs.stat
readfile = thunkify fs.readFile

class ForaTypeUtils extends odm.TypeUtils

    init: =>*
        yield @buildTypeCache()
        
        

    getCacheItems: =>*
        definitions = {}
        
        for defs in [yield @getModelTypeDefinitions(), yield @getTrustedUserTypes()]
            for name, def of defs
                definitions[name] ?= def    
        
        return definitions
        
    
    
    getModelTypeDefinitions: =>*
        #Get type definitions from models
        models = []

        fnAdd = (module) ->
            for name, model of module
                models.push model
                if model.childModels                    
                    fnAdd model.childModels

        for moduleName in ['./', './fields']
            fnAdd require moduleName

        
        definitions = {}
        
        for model in models            
            def = if typeof model.typeDefinition is "function" then model.typeDefinition() else model.typeDefinition
            def = @completeTypeDefinition(def, model)
            definitions[def.name] ?= def
        
        definitions
        
    
    
    getTrustedUserTypes: =>*
        definitions = {}
        
        Forum = require('./forum').Forum
        yield @addTrustedUserTypes Forum, 'forum', 'forums', definitions

        Post = require('./post').Post
        yield @addTrustedUserTypes Post, 'post', 'posts', definitions

        return definitions



    addTrustedUserTypes: (ctor, baseTypeName, dir, definitions) =>*
        typeDef = if typeof ctor.typeDefinition is "function" then ctor.typeDefinition() else ctor.typeDefinition
        
        for typeName in yield @getUserTypeDirectories path.join conf.extensionsDir, dir
            for version in yield @getUserTypeDirectories path.join conf.extensionsDir, dir, typeName
                def = JSON.parse yield readfile path.join conf.extensionsDir, dir, typeName, version, 'model.json'
                def.type = baseTypeName
                def.name = "#{dir}/#{typeName}/#{version}"
                def.version = version
                definitions["#{dir}/#{typeName}/#{version}"] ?= def

                def.extensionType = 'builtin'
                for field in ['collection', 'trackChanges', 'autoGenerated', 'logging']
                    def[field] = typeDef[field]

                def.ctor = ctor

                def.inheritedProperties = []
                for k, v of typeDef.schema.properties
                    def.schema.properties[k] = v
                    def.inheritedProperties.push k

                for req in typeDef.schema.required
                    if def.schema.required?.indexOf(req) is -1
                        def.schema.required.push req
                        
        return



    getUserTypeDirectories: (dir) =>*
        dirs = []
        files = yield readdir dir
        for file, index in files
            filePath = "#{dir}/#{file}"
            entry = yield stat filePath
            if entry.isDirectory()
                dirs.push(file)
        dirs      

        
        
    resolveDynamicTypeDefinition: (name) =>*
        #TODO: make sure we dont allow special characters in name, like '..'
        console.log "Missing " + JSON.stringify name
        
        
module.exports = ForaTypeUtils
