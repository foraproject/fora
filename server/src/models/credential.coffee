thunkify = require 'thunkify'
ForaDbModel = require('./foramodel').ForaDbModel
hasher = require '../app-lib/hasher'
utils = require '../app-lib/utils'
models = require './'


class Credential extends ForaDbModel
    
    emailRegex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/

    @typeDefinition: {
        name: 'credential',
        collection: 'credential',
        schema: {
            type: 'object',        
            properties: {
                email: { type: 'string' },                
                emailIsVerified: { type: 'boolean' },
                preferences: { 
                    type: 'object',
                    schema: {
                        properties: {
                            canEmail: { type: 'boolean' }
                        }
                    }
                },
                builtin: { 
                    type: 'object',
                    schema: {
                        properties: {
                            hash: { type: 'string' },
                            salt: { type: 'string' }
                        }
                        required: [ 'hash', 'salt' ]
                    }
                },
                twitter: {
                    type: 'object',
                    schema: {
                        properties: {
                            id: { type: 'string' },
                            username: { type: 'string' },
                            accessToken: { type: 'string' }
                            accessTokenSecret: { type: 'string' }
                        }
                        required: [ 'id', 'username', 'accessToken', 'accessTokenSecret' ]
                    }
                },
                facebook: {
                    type: 'object',
                    schema: {
                        properties: {
                            id: { type: 'string' },
                            username: { type: 'string' },
                            accessToken: { type: 'string' }
                        }
                        required: [ 'id', 'username', 'accessToken' ]
                    }
                }
            }
        },
        autoGenerated: {
            createdAt: { event: 'created' },
            updatedAt: { event: 'updated' }
        },
        indexes: [
            { 'type': 1, 'email': 1 },
        ],
        links: {
            users: { type: 'user', field: 'credentialId' }
        },
        validate: (fields) ->*
            if @email and not emailRegex.test(@email)
                ['Invalid email']            
    }
    


    #Create a credential token.
    #This can be used to upgrade to a user token, which is then used for login.
    createSession: (context, db) =>*
        session = new models.Session { 
            credentialId: db.getRowId(@), 
            token: utils.uniqueId(24) 
        }    
        yield session.save context, db

    
    
    addBuiltin: (username, password, context, db) =>*
        { context, db } = @getContext context, db
        existing = yield models.Credential.get({ "builtin.username": username }, context, db)
        if not existing
            hashed = yield thunkify(hasher) { plaintext: password }
            @builtin = {
                method: 'PBKDF2'
                username: username
                salt: hashed.salt.toString('hex')
                hash: hashed.key.toString('hex')
            }
            yield @save context, db
        else
            throw new Error "Built-in credential with the same username already exists"
    

        
    addTwitter: (id, username, accessToken, accessTokenSecret, context, db) =>*
        { context, db } = @getContext context, db
        existing = yield models.Credential.get({ "twitter.id": id }, context, db)
        if not existing
            @twitter = {
                id,
                username,
                accessToken,
                accessTokenSecret
            }
            yield @save context, db
        else
            throw new Error "Twitter credential with the same id already exists"



    @authenticateBuiltin: (username, password, context, db) ->*
        credential = yield models.credential.get({ "builtin.username": username }, context, db)
        if credential
            salt = new Buffer credential.builtin.salt, 'hex'
            result = yield thunkify(hasher) {plaintext: password, salt}
            if credential.hash is result.key.toString 'hex'
                { token: credential.token }
            else
                { success: false, error: "Invalid username or password" }
        else
            { success: false, error: "Invalid username or password" }
        

exports.Credential = Credential
