ForaModel = require('./foramodel').ForaModel
ForaDbModel = require('./foramodel').ForaDbModel
utils = require '../lib/utils'
Q = require '../lib/q'
hasher = require('../lib/hasher').hasher
models = require './'

emailRegex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/

class User extends ForaDbModel

    class Summary extends ForaModel    
        @typeDefinition: {
            type: @,
            alias: "User.Summary",
            fields: {
                id: 'string',
                username: 'string',
                name: 'string',
            }
        }
        
    @Summary: Summary
    
    @childModels: { Summary }

    @typeDefinition: {
        type: @,
        alias: "User",
        collection: 'users',
        fields: {
            username: 'string',
            name: 'string',
            location: 'string !required',
            followerCount: 'number',
            email: { type: 'string', validate: -> emailRegex.test(@email) },
            accessToken: { type: 'string', required: false },
            lastLogin: 'number',
            about: { type: 'string', required: false },
            createdAt: { autoGenerated: true, event: 'created' },
            updatedAt: { autoGenerated: true, event: 'updated' },
        },
        logging: {
            onInsert: 'NEW_USER'
        }
    }
       

   
    create: (authInfo, context, db) ->
        (Q.async =>*
            #We can't create a new user with an existing username.
            if not @_id and not (yield User.get { @username }, context, db)
                @preferences = { canEmail: true }

                user = yield @save context, db
                
                #Also create a userinfo
                userinfo = new (models.UserInfo) {
                    userid: @_id.toString(),
                }
                userinfo = yield userinfo.save context, db
                
                credentials = new (models.Credentials) {
                    userid: user._id.toString(),
                    @username,
                    token: utils.uniqueId(24)                    
                }

                switch authInfo.type
                    when 'builtin'
                        result = yield Q.nfcall(hasher, { plaintext: authInfo.value.password })
                        salt = result.salt.toString 'hex'
                        hash = result.key.toString 'hex'
                        credentials.builtin = { method: 'PBKDF2', @username, hash, salt }
                    when 'twitter'
                        credentials.twitter = authInfo.value
                
                credentials = yield credentials.save context, db
                        
                { user, token: credentials.token }
            else
                { success: false, error: "User aready exists" }
        )()
            

                                                            
    @getByUsername: (username, context, db) ->
        User.get({ username }, context, db)



    constructor: (params) ->
        @followerCount ?= 0
        super



    getUrl: =>
        "/~#{@username}"



    getAssetUrl: =>
        "/pub/assetpaths/#{utils.getHashCode(@username) % 1000}"



    summarize: =>
        new Summary {
            id: @_id.toString()
            username: @username
            name: @name,
        }
        
    
exports.User = User
