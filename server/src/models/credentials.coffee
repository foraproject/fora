ForaDbModel = require('./foramodel').ForaDbModel
hasher = require('../lib/hasher')
models = require('./')

class Credentials extends ForaDbModel
    
    @typeDefinition: {
        name: 'credentials',
        collection: 'credentials',
        schema: {
            type: 'object',        
            properties: {
                userId: { type: 'string' },
                username: { type: 'string' },
                token: { type: 'string' },
                builtin: { type: 'object' },
                twitter: { type: 'object' },
                facebook: { type: 'object' }
            },
            required: ['userId', 'username', 'token']
        },
        links: {
            user: { type: 'user', key: 'userId' }
        },
        autoGenerated: {
            createdAt: { event: 'created' },
            updatedAt: { event: 'updated' }
        },
        validate: (fields) ->*
            errors = []
            if @builtin and not (@builtin.method is 'PBKDF2' and @builtin.username and @builtin.hash and @builtin.salt)
                errors.push 'builtin is invalid'
            if @twitter and not (@twitter.id or @twitter.username or @twitter.accessToken and @twitter.accessTokenSecret)
                errors.push 'twitter is invalid'
            if @facebook and not (@facebook.id and @facebook.username and @facebook.accessToken)
                errors.push 'facebook is invalid'
            if not @builtin and not @twitter and not @facebook
                errors.push 'At least one credential must me specified'
    }    


    #Todo. Token Expiry.   
    @authenticateBuiltinUser: (username, password, context, db) ->*
        credentials = yield models.Credentials.get({ "builtin.username": username }, context, db)
        if credentials
            salt = new Buffer credentials.builtin.salt, 'hex'
            result = yield thunkify(hasher) {plaintext: password, salt}
            if credentials.hash is result.key.toString 'hex'
                { token: credentials.token }
            else
                { success: false, error: "Invalid username or password" }
        else
            { success: false, error: "Invalid username or password" }
        

exports.Credentials = Credentials
