thunkify = require 'thunkify'
ForaModel = require('./foramodel').ForaModel
ForaDbModel = require('./foramodel').ForaDbModel
utils = require('../lib/utils')
models = require('./')

class Forum extends ForaDbModel

    class Settings extends ForaModel

        @typeDefinition: {
            type: @,
            name: "forum-settings",
            fields: {
                commentsEnabled: 'boolean !required',
                commentsOpened: 'boolean !required',
            }
        }

    @Settings: Settings

    class Summary extends ForaModel   
        @typeDefinition: {
            type: @,
            name: "forum-summary",
            fields: {
                id: 'string',
                network: 'string',
                name: 'string',
                stub: 'string',
                createdBy: "user-summary" 
            }
        }    

    @Summary: Summary

    class Stats extends ForaModel   
        @typeDefinition: {
            type: @,
            name: "forum-stats",
            fields: {
                posts: 'number',
                members: 'number',
                lastPost: 'number'
            }
        }
        
    @Stats: Stats

    @childModels: { Stats, Summary, Settings }

    @typeDefinition: -> {
        type: @,
        name: 'forum',
        collection: 'forums',
        fields: {
            network: 'string',
            name: 'string',
            stub: 'string',
            description: 'string',
            type: { type: 'string', $in: ['public', 'protected', 'private'] },
            postTypes: { type: 'array', contents: 'string', map: { format: 'csv' } },
            settings: "forum-settings !required",
            cover: 'cover !required',
            createdBy: "user-summary",
            snapshot: '',            
            stats: "forum-stats",
            createdAt: { autoGenerated: true, event: 'created' },
            updatedAt: { autoGenerated: true, event: 'updated' }
        },
        associations: {
            info: { type: "forum-info", key: { '_id': 'forumid' } }
        },
        logging: {
                onInsert: 'NEW_FORUM'
        }
    }
        
    
    save: (context, db) =>        
        if not @_id
            @stats = new Stats {
                posts: 0,
                members: 1,
                lastPost: 0
            }
            @postTypes ?= []
            @snapshot ?= { posts: [] }
        
        super


        
    summarize: =>        
        summary = new Summary {
            id: @_id.toString()
            network: @network,
            name: @name,
            stub: @stub,
            createdBy: @createdBy
        }
        
        
        
    getView: (name) =>
        switch name
            when 'card'
                {
                    id: @_id.toString()
                    @network,
                    @name,
                    @description,
                    @stub,
                    @createdBy,
                    @snapshot,
                    image: @cover?.image?.small
                }



    join: (user, token, context, db) =>*
        { context, db } = @getContext context, db
        if @type is 'public'
            yield @addRole user, 'member', context, db
        else
            throw new Error "Access denied"
        
        
        
    addPost: (post, context, db) =>*
        { context, db } = @getContext context, db
        post.forum = @summarize()
        yield post.save context, db
        


    getPosts: (limit, sort, context, db) =>*
        { context, db } = @getContext context, db
        yield models.Post.find({ 'forum.stub': @stub, 'forum.network': @network, state: 'published' }, ((cursor) -> cursor.sort(sort).limit limit), context, db)
        

    
    addRole: (user, role, context, db) =>*
        { context, db } = @getContext context, db
        
        membership = yield models.Membership.get { 'forum.id': @_id.toString(), 'user.username': user.username }, context, db
        if not membership
            membership = new (models.Membership) {
                forum: @summarize(),
                user: user,
                roles: [role]
            }
        else
            if membership.roles.indexOf(role) is -1 
                membership.roles.push role
        yield membership.save context, db   
                


    removeRole: (user, role, context, db) =>*
        { context, db } = @getContext context, db
        
        membership = yield models.Membership.get { 'forum.id': @_id.toString(), 'user.username': user.username }, context, db
        membership.roles = (r for r in membership.roles when r isnt role)
        yield if membership.roles.length then membership.save() else membership.destroy()
                
    
                                
    getMemberships: (roles, context, db) =>*
        { context, db } = @getContext context, db
        yield models.Membership.find { 'forum.id': @_id.toString(), roles: { $in: roles } }, ((cursor) -> cursor.sort({ id: -1 }).limit 200), context, db
        
      
            
    refreshSnapshot: (context, db) =>*
        { context, db } = @getContext context, db
        posts = yield @getPosts 10, { _id: -1 }, context, db
        @snapshot = { posts: (p.getView("snapshot") for p in posts) }
        if posts.length
            cursor = yield models.Post.getCursor({ 'forum.id': @_id.toString() , state: 'published' }, context, db)
            @stats.posts = yield thunkify(cursor.count).call cursor
            @stats.lastPost = posts[0].savedAt
            yield @save context, db

exports.Forum = Forum

