utils = require '../lib/utils'
models = require('./')
Q = require('../lib/q')
widgets = require '../common/widgets'
ForaModel = require('./foramodel').ForaModel
ForaDbModel = require('./foramodel').ForaDbModel

class Record extends ForaDbModel
    
    @typeDefinition: {
        type: @,
        alias: "Record",
        collection: 'records',
        discriminator: (obj) -> 
            switch obj.type
                when 'Article' then models.Article
                when 'Conversation' then models.Conversation
                else Record                
        fields: {
            type: 'string',
            forum: "Forum.Summary",
            createdBy: "User.Summary",
            meta: { type: 'array', contents: 'string' },
            tags: { type: 'array', contents: 'string' },
            stub: { type: 'string' },
            recommendations: { type: 'array', contents: "User.Summary" },            
            state: { type: 'string', $in: ['draft','published'] },
            savedAt: { type: 'number' },
            createdAt: { autoGenerated: true, event: 'created' },
            updatedAt: { autoGenerated: true, event: 'updated' }
        },
        trackChanges: true,
        logging: {
            onInsert: 'NEW_POST'
        }
    }


    @search: (criteria, settings, context, db) =>
        limit = @getLimit settings.limit, 100, 1000
                
        params = {}
        for k, v of criteria
            params[k] = v
        
        Record.find params, ((cursor) -> cursor.sort(settings.sort).limit limit), context, db
        

        
    @getLimit: (limit, _default, max) ->
        result = _default
        if limit
            result = limit
            if result > max
                result = max
        result    


    
    constructor: (params) ->
        super
        @recommendations ?= []
        @meta ?= []
        @tags ?= []
       
    
    
    addMetaList: (metaList) =>
        (Q.async =>
            @meta = @meta.concat (m for m in metaList when @meta.indexOf(m) is -1)
            yield @save()
        )()
        


    removeMetaList: (metaList) =>
        (Q.async =>
            @meta = (m for m in @meta when metaList.indexOf(m) is -1)
            yield @save()
        )()
            
    

    save: (context, db) =>
        { context, db } = @getContext context, db
        
        (Q.async =>
            #If the stub has changed, we need to check if it's unique
            @stub ?= utils.uniqueId(16)

            result = yield super(context, db)
            
            if @state is 'published'
                forum = yield models.Forum.getById @forum.id, context, db
                forum.refreshSnapshot()
            
            result
        )()
            


    #Dummy. So that a data error doesn't blow up the app.
    getTemplate: (name = "standard") =>
        @parseTemplate {
            widget: "recordview",                    
            itemPane: [],
            sidebar: []
        }                
        

    
    parseTemplate: (data) =>    
        if data instanceof Array
            (@parseTemplate(i) for i in data)
        else if data.widget
            ctor = if typeof data.widget is 'string' then @getWidget(data.widget) else data.widget
            params = {}
            for k, v of data
                if k isnt 'widget'
                    params[k] = @parseTemplate v
            new ctor params
        else
            data
                


    getWidget: (name) =>
        switch name
            when 'image'
                widgets.Image
            when 'heading'
                widgets.Heading
            when 'authorship'
                widgets.Authorship
            when 'text'
                widgets.Text
            when 'recordview'
                widgets.RecordView
            when 'cardview'
                widgets.CardView
            
exports.Record = Record
