(function() {
    "use strict";

    var __hasProp = {}.hasOwnProperty,
        __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } };

    var ForaDbModel = require('./foramodel').ForaDbModel;

    var RecordBase = function() {
        ForaDbModel.apply(this, arguments);
    };

    RecordBase.prototype = Object.create(ForaDbModel.prototype);
    RecordBase.prototype.constructor = RecordBase;

    __extends(RecordBase, ForaDbModel);

    RecordBase.typeDefinition = {
        name: "record",
        collection: 'records',
        schema: {
            type: 'object',
            properties: {
                type: { type: 'string' },
                appId: { type: 'string' },
                createdById: { type: 'string' },
                createdBy: { $ref: 'user-summary' },
                meta: { type: 'array', items: { type: 'string' } },
                tags: { type: 'array', items: { type: 'string' } },
                stub: { type: 'string' },
                state: { type: 'string', enum: ['draft','published'] },
                savedAt: { type: 'integer' }
            },
            required: ['type', 'appId', 'app', 'createdById', 'createdBy', 'meta', 'tags', 'stub', 'state', 'savedAt']
        },
        indexes: [
            { 'state': 1, 'app.stub': 1 },
            { 'state': 1, 'appId': 1 },
            { 'state': 1, 'createdAt': 1, 'app.stub': 1 },
            { 'createdById' : 1 },
            { 'createdBy.username': 1 }
        ],
        links: {
            app: { type: 'app', key: 'appId' }
        },
        autoGenerated: {
            createdAt: { event: 'created' },
            updatedAt: { event: 'updated' }
        },
        trackChanges: true,
        logging: {
            onInsert: 'NEW_POST'
        }
    };

    exports.RecordBase = RecordBase;

})();
