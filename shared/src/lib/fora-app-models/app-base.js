(function() {
	"use strict";

	var __hasProp = {}.hasOwnProperty,
		__extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } };

	var ForaModel = require('./foramodel').ForaModel;
	var ForaDbModel = require('./foramodel').ForaDbModel;

	var AppBase = function() {
		ForaDbModel.apply(this, arguments);

		if (!this.cache)
			this.cache = {
				records: []
			};

		if (!this.stats) {
			this.stats = new AppStats({
				records: 0,
				members: 0,
				lastRecord: 0
			});
		}

		if (!this.records)
			this.records = [];
	};

	AppBase.prototype = Object.create(ForaDbModel.prototype);
	AppBase.prototype.constructor = AppBase;

	__extends(AppBase, ForaDbModel);


	//AppSummary
	var AppSummary = function() {
		ForaModel.apply(this, arguments);
	};

	AppSummary.prototype = Object.create(ForaModel.prototype);
	AppSummary.prototype.constructor = AppSummary;

	__extends(AppSummary, ForaModel);

	AppSummary.typeDefinition = {
		name: "app-summary",
		schema: {
			type: 'object',
			properties: {
				id: {
					type: 'string'
				},
				name: {
					type: 'string'
				},
				stub: {
					type: 'string'
				},
				createdBy: {
					$ref: "user-summary"
				}
			},
			required: ['id', 'name', 'stub', 'createdBy']
		}
	};


	//AppSummary
	var AppStats = function() {
		ForaModel.apply(this, arguments);
	};

	AppStats.prototype = Object.create(ForaModel.prototype);
	AppStats.prototype.constructor = AppStats;

	__extends(AppStats, ForaModel);


	AppStats.typeDefinition = {
		name: "app-stats",
		schema: {
			type: 'object',
			properties: {
				records: {
					type: 'number'
				},
				members: {
					type: 'number'
				},
				lastRecord: {
					type: 'number'
				}
			},
			required: ['records', 'members', 'lastRecord']
		}
	};


	AppBase.typeDefinition = {
		name: 'app',
		collection: 'apps',
		schema: {
			type: 'object',
			properties: {
				type: { type: 'string' },
				version: { type: 'string' },
				versionMajor: { type: 'number' },
				versionMinor: { type: 'number' },
				versionRevision: { type: 'number' },
				name: { type: 'string' },
				description: { type: 'string' },
				stub: { type: 'string' },
				access: {
					type: 'string',
					"enum": ['public', 'protected', 'private']
				},
				createdBy: { $ref: 'user-summary' },
				cover: { $ref: 'cover' },
				theme: { type: 'string' },
				cache: {
					type: 'object',
					properties: {
						records: {
							type: 'array',
							items: {
								type: 'object',
								properties: {
									image: { type: 'string' },
									title: { type: 'string' },
									createdBy: { $ref: 'user-summary' },
									id: { type: 'string' },
									stub: { type: 'string' }
								},
								required: ['title', 'createdBy', 'id', 'stub']
							}
						}
					},
					required: ['records']
				},
				stats: { $ref: 'app-stats' }
			},
			required: ['type', 'version', 'versionMajor', 'versionMinor', 'versionRevision',
				'name', 'description', 'stub', 'access', 'createdBy', 'cache', 'stats']
		},
		indexes: [ { 'createdBy.id': 1 }, { 'stub': 1 }	],
		autoGenerated: {
			createdAt: { event: 'created' },
			updatedAt: { event: 'updated' }
		},
		links: {
			records: { type: 'record', field: 'appId' },
			info: { Type: 'app-info', field: 'appId' }
		},
		logging: {
			onInsert: 'NEW_APP'
		}
	};


	exports.AppBase = AppBase;
	exports.AppStats = AppStats;
	exports.AppSummary = AppSummary;


})();
