ForaModel = require('./foramodel').ForaModel
ForaDbModel = require('./foramodel').ForaDbModel

class ForumBase extends ForaDbModel

    class Settings extends ForaModel
        @typeDefinition: {
            name: "forum-settings",
            schema: {
                type: 'object',                    
                properties: {
                    commentsEnabled: { type: 'boolean' },
                    commentsOpened: { type: 'boolean' }
                }
            }
        }

    @Settings: Settings

    class Summary extends ForaModel
        @typeDefinition: {
            name: "forum-summary",
            schema: {
                type: 'object',        
                properties: {
                    id: { type: 'string' },                
                    network: { type: 'string' },
                    name: { type: 'string' },
                    stub: { type: 'string' },
                    createdBy: { $ref: "user-summary" }
                },
                required: ['id', 'network', 'name', 'stub', 'createdBy']
            }
        }    

    @Summary: Summary

    class Stats extends ForaModel   
        @typeDefinition: {
            name: "forum-stats",
            schema: {
                type: 'object',        
                properties: {
                    posts: { type: 'number' },
                    members: { type: 'number' },
                    lastPost: { type: 'number' }
                }
                required: ['posts', 'members', 'lastPost']
            }
        }
        
    @Stats: Stats

    @childModels: { Stats, Summary, Settings }

    @typeDefinition: -> {
        name: 'forum',
        collection: 'forums',
        discriminator: (obj) ->*
            def = yield Forum.getTypeUtils().getTypeDefinition(obj.type)
            if def.ctor isnt Forum
                throw new Error "Forum type definitions must have ctor set to Forum"
            def        
        schema: {
            type: 'object',
            properties: {
                type: { type: 'string' },
                network: { type: 'string' },
                name: { type: 'string' },
                description: { type: 'string' },
                stub: { type: 'string' },
                access: { type: 'string', enum: ['public', 'protected', 'private'] },
                createdById: { type: 'string' }
                createdBy: { $ref: 'user-summary' },
                settings: { $ref: 'forum-settings' },
                cover: { $ref: 'cover' },
                theme: { type: 'string' },
                cache: { 
                    type: 'object',
                    properties: {
                        posts: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    image: { type: 'string' },
                                    title: { type: 'string' },
                                    createdBy: { $ref: 'user-summary' }
                                    id: { type: 'string' },
                                    stub: { type: 'string' }                  
                                },
                                required: ['title', 'createdBy', 'id', 'stub']
                            }
                        }
                    }
                    required: ['posts']
                }
                stats: { $ref: 'forum-stats' },
            }
            required: ['type', 'network', 'name', 'description', 'stub', 'access', 'createdById', 'createdBy', 'cache', 'stats']
        },
        indexes: [
            { 'createdById': 1, 'network': 1 },
            {'stub': 1, 'network': 1 }
        ],
        autoGenerated: {
            createdAt: { event: 'created' },
            updatedAt: { event: 'updated' }
        },
        links: {
            createdBy: { type: 'user-summary', key: 'createdById' }
            posts: { type: 'post', field: 'forumId' },
            info: { type: 'forum-info', field: 'forumId' }
        },
        logging: {
                onInsert: 'NEW_FORUM'
        }
    }


module.exports = ForumBase

