(function() {
	"use strict";

	var __hasProp = {}.hasOwnProperty,
		__extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } };

	var ForaModel = require('./foramodel').ForaModel;
	var ForaDbModel = require('./foramodel').ForaDbModel;

	var AppBase = function() {
		ForaDbModel.apply(this, arguments);
	};

	AppBase.prototype = Object.create(ForaDbModel.prototype);
	AppBase.prototype.constructor = AppBase;

	__extends(AppBase, ForaDbModel);


	//Settings
	var Settings = function() {
		ForaModel.apply(this, arguments);
	};

	Settings.prototype = Object.create(ForaModel.prototype);
	Settings.prototype.constructor = Settings;

	__extends(Settings, ForaModel);

	Settings.typeDefinition = {
		name: "app-settings",
		schema: {
			type: 'object',
			properties: {
				commentsEnabled: { type: 'boolean' },
				commentsOpened: { type: 'boolean' }
			}
		}
	};

	AppBase.Settings = Settings;


	//Summary
	var Summary = function() {
		ForaModel.apply(this, arguments);
	};

	Summary.prototype = Object.create(ForaModel.prototype);
	Summary.prototype.constructor = Summary;

	__extends(Summary, ForaModel);

	Summary.typeDefinition = {
		name: "app-summary",
		schema: {
			type: 'object',
			properties: {
				id: {
					type: 'string'
				},
				network: {
					type: 'string'
				},
				name: {
					type: 'string'
				},
				stub: {
					type: 'string'
				},
				createdBy: {
					$ref: "user-summary"
				}
			},
			required: ['id', 'network', 'name', 'stub', 'createdBy']
		}
	};

	AppBase.Summary = Summary;


	//Summary
	var Stats = function() {
		ForaModel.apply(this, arguments);
	};

	Stats.prototype = Object.create(ForaModel.prototype);
	Stats.prototype.constructor = Stats;

	__extends(Stats, ForaModel);


	Stats.typeDefinition = {
		name: "app-stats",
		schema: {
			type: 'object',
			properties: {
				records: {
					type: 'number'
				},
				members: {
					type: 'number'
				},
				lastRecord: {
					type: 'number'
				}
			},
			required: ['records', 'members', 'lastRecord']
		}
	};

	AppBase.Stats = Stats;


	//Set these as child models.
	AppBase.childModels = {
		Stats: Stats,
		Summary: Summary,
		Settings: Settings
	};

	AppBase.typeDefinition = {
		name: 'app',
		collection: 'apps',
		schema: {
			type: 'object',
			properties: {
				type: { type: 'string' },
				network: { type: 'string' },
				name: { type: 'string' },
				description: { type: 'string' },
				stub: { type: 'string' },
				access: {
					type: 'string',
					"enum": ['public', 'protected', 'private']
				},
				createdById: { type: 'string' },
				createdBy: { $ref: 'user-summary' },
				settings: { $ref: 'app-settings' },
				cover: { $ref: 'cover' },
				theme: { type: 'string' },
				cache: {
					type: 'object',
					properties: {
						records: {
							type: 'array',
							items: {
								type: 'object',
								properties: {
									image: { type: 'string' },
									title: { type: 'string' },
									createdBy: { $ref: 'user-summary' },
									id: { type: 'string' },
									stub: { type: 'string' }
								},
								required: ['title', 'createdBy', 'id', 'stub']
							}
						}
					},
					required: ['records']
				},
				stats: { $ref: 'app-stats' }
			},
			required: ['type', 'network', 'name', 'description', 'stub', 'access', 'createdById', 'createdBy', 'cache', 'stats']
		},
		indexes: [ {
				'createdById': 1,
				'network': 1
			}, {
				'stub': 1,
				'network': 1
			}
		],
		autoGenerated: {
			createdAt: { event: 'created' },
			updatedAt: { event: 'updated' }
		},
		links: {
			createdBy: { type: 'user-summary', key: 'createdById' },
			records: { type: 'record', field: 'appId' },
			info: { Type: 'app-info', field: 'appId' }
		},
		logging: {
			onInsert: 'NEW_FORUM'
		}
	};


	exports.AppBase = AppBase;

})();
