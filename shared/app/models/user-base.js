// Generated by CoffeeScript 1.6.3
(function() {
  var ForaDbModel, ForaModel, UserBase,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ForaModel = require('./foramodel').ForaModel;

  ForaDbModel = require('./foramodel').ForaDbModel;

  UserBase = (function(_super) {
    var Summary;

    __extends(UserBase, _super);

    function UserBase() {
      return UserBase.__super__.constructor.apply(this, arguments);
    }

    Summary = (function(_super1) {
      __extends(Summary, _super1);

      function Summary() {
        this.getAssetUrl = __bind(this.getAssetUrl, this);
        this.getUrl = __bind(this.getUrl, this);
        return Summary.__super__.constructor.apply(this, arguments);
      }

      Summary.typeDefinition = {
        name: "user-summary",
        schema: {
          type: 'object',
          properties: {
            id: {
              type: 'string'
            },
            username: {
              type: 'string'
            },
            name: {
              type: 'string'
            },
            assets: {
              type: 'string'
            }
          },
          required: ['id', 'username', 'name', 'assets']
        }
      };

      Summary.prototype.getUrl = function() {
        return "/~" + this.username;
      };

      Summary.prototype.getAssetUrl = function() {
        return "/public/assets/" + this.assets;
      };

      return Summary;

    })(ForaModel);

    UserBase.Summary = Summary;

    UserBase.childModels = {
      Summary: Summary
    };

    UserBase.typeDefinition = {
      name: "user",
      collection: 'users',
      schema: {
        type: 'object',
        properties: {
          credentialId: {
            type: 'string'
          },
          username: {
            type: 'string'
          },
          name: {
            type: 'string'
          },
          assets: {
            type: 'string'
          },
          location: {
            type: 'string'
          },
          followingCount: {
            type: 'integer'
          },
          followerCount: {
            type: 'integer'
          },
          lastLogin: {
            type: 'number'
          },
          about: {
            type: 'string'
          }
        },
        required: ['credentialId', 'username', 'name', 'assets', 'followingCount', 'followerCount', 'lastLogin']
      },
      indexes: [
        {
          'credentialId': 1
        }, {
          'token': 1
        }, {
          'userId': 1
        }, {
          'username': 1
        }
      ],
      links: {
        credential: {
          type: 'credential',
          key: 'credentialId'
        },
        info: {
          type: 'user-info',
          field: 'userId',
          multiplicity: 'one'
        }
      }
    };

    return UserBase;

  })(ForaDbModel);

  module.exports = UserBase;

}).call(this);
