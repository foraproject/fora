(function() {
    "use strict";

    var _;

    var odm = require('fora-models');

    var ForaTypesServiceBase = function() {
        odm.TypesService.apply(this, arguments);
    };

    ForaTypesServiceBase.prototype = Object.create(odm.TypesService.prototype);
    ForaTypesServiceBase.prototype.constructor = ForaTypesServiceBase;


    ForaTypesServiceBase.prototype.init = function*(builtinTypes, trustedTypes) {
        this.builtinTypes = builtinTypes;
        this.trustedTypes = trustedTypes;
        return yield* this.buildTypeCache();
    };


    ForaTypesServiceBase.prototype.getCacheItems = function*() {
        var definitions = {};

        [yield* this.getBuiltInTypes(), yield* this.getTrustedTypes()].forEach(function(defs) {
            for (var name in defs) {
                var def = defs[name];
                definitions[name] = def;
            }
        });

        return definitions;
    };


    ForaTypesServiceBase.prototype.getBuiltInTypes = function*() {
        var models = [];

        var fnAdd = function(module) {
            for (var name in module) {
                var model = module[name];
                models.push(model);
                if (model.childModels)
                    fnAdd(model.childModels);
            }
        };

        this.builtinTypes.forEach(function(t) { fnAdd(t); });

        var definitions = {};

        models.forEach(function(model) {
            var def = this.completeTypeDefinition(model.typeDefinition, model);
            definitions[def.name] = definitions[def.name] || def;
        }, this);

        return definitions;
    };


    ForaTypesServiceBase.prototype.getTrustedTypes = function*() {
        var definitions = {};
        for (var i = 0; i < this.trustedTypes.length; i++) {
            var t = this.trustedTypes[i];
            _ = yield* this.addTrustedTypes(t.ctor, t.type, t.directory, definitions);
        }
        return definitions;
    };


    ForaTypesServiceBase.prototype.addTrustedTypes = function*() {
        throw new Error("addTrustedUserTypes() method must be overridden in derived class.");
    };


    ForaTypesServiceBase.prototype.mergeUserTypeDefinition = function(ext, ctor, baseTypeName, dir, typeName, version, typeDef) {
        var def = JSON.parse(JSON.stringify(ext.typeDefinition));

        if (typeDef.initialize)
            def.initialize = typeDef.initialize;

        def.type = baseTypeName;
        def.name = dir + "/" + typeName + "/" + version;
        def.version = version;
        def.extensionType = 'builtin';

        ['collection', 'trackChanges', 'autoGenerated', 'logging'].forEach(function(field) {
            def[field] = typeDef[field];
        });

        def.ctor = ctor;

        def.inheritedProperties = [];

        for (var k in typeDef.schema.properties) {
            v = typeDef.schema.properties[k];
            def.schema.properties[k] = v;
            def.inheritedProperties.push(k);
        }

        typeDef.schema.required.forEach(function(req) {
            if (def.schema.required && def.schema.required.indexOf(req) === -1)
                def.schema.required.push(req);
        });
        return def;
    };


    ForaTypesServiceBase.prototype.resolveTrustedTypeDefinition = function*(name) {
        //TODO: make sure we dont allow special characters in name, like '..'
        console.log("Missing " + JSON.stringify(name));
    };

    module.exports = ForaTypesServiceBase;

})();
